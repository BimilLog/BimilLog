plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'jaeik'
version = '2.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // ==== Spring Boot 기본 스타터 ====
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign" // 외부 API 호출용

    // ==== 데이터베이스 관련 ====
    runtimeOnly 'com.mysql:mysql-connector-j' // MySQL JDBC 드라이버
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // QueryDSL JPA 지원
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta' // QueryDSL 코드 생성용
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api' // Jakarta 어노테이션 지원
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api' // Jakarta Persistence API 지원
    implementation 'org.springframework.boot:spring-boot-starter-data-redis' // Redis 데이터베이스 지원
    implementation 'org.springframework.boot:spring-boot-starter-cache' // 캐시 지원
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch' // Elasticsearch 지원
    implementation 'org.flywaydb:flyway-core' // DB 마이그레이션 관리
    implementation 'org.flywaydb:flyway-mysql' // MySQL 전용 Flyway 지원



    // ==== JWT (토큰 인증) 관련 ====
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5' // JWT API
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5' // JWT 구현체
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // JWT JSON 변환 지원 (Jackson)

    // ==== 유효성 검사 및 JSON 처리 ====
    implementation 'org.hibernate.validator:hibernate-validator' // Bean Validation (유효성 검사)


    // ==== Lombok (코드 자동 생성) ====
    compileOnly 'org.projectlombok:lombok' // 컴파일 타임에만 필요한 Lombok
    annotationProcessor 'org.projectlombok:lombok' // Lombok 어노테이션 프로세서

    // ==== 개발 편의 기능 ====
    developmentOnly 'org.springframework.boot:spring-boot-devtools' // 개발 시 자동 재시작 지원

    // ==== 테스트 관련 ====
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // 테스트용 스타터
    testImplementation 'org.springframework.security:spring-security-test' // Spring Security 테스트 지원
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // JUnit 플랫폼 런처 (Gradle 경고 방지)

    // ==== TestContainers (실제 DB 테스트) ====
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3' // TestContainers JUnit 지원
    testImplementation 'org.testcontainers:mysql:1.19.3' // MySQL TestContainer
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    // ==== E2E 테스트 (Playwright) ====
    testImplementation 'com.microsoft.playwright:playwright:1.49.0' // Playwright 브라우저 자동화
    testImplementation 'org.assertj:assertj-core:3.26.3' // AssertJ 테스트 검증

    // ==== 알림 관련 ====
    implementation 'com.google.firebase:firebase-admin:9.2.0' // Google Firebase Admin

    // ==== 로깅 및 AWS ====
    implementation 'ca.pjer:logback-awslogs-appender:1.6.0'
    implementation 'software.amazon.awssdk:cloudwatchlogs' // AWS CloudWatch Logs SDK
    implementation platform('software.amazon.awssdk:bom:2.26.0')
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:regions'
    implementation 'software.amazon.awssdk:http-client-spi'

    // ==== 네트워크 ====
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'




    // ==== Commons Logging 충돌 해결 ====
    configurations.configureEach {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
}

// ==== QueryDSL 설정 ====
def generated = 'src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()
}

ext {
    set('springCloudVersion', "2024.0.0") // openfeign 호환
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" // openfeign 호환
    }
}